extends layout.pug

block content
	.container
		.page-header
			h1 Create a Robot
		p.lead Oh boy, let's make some #[strong Robots]! A #[strong Robot] is what actually knows things. What a #[strong Robot] can know is dictated by what #[strong Factory] it is built from.

		.panel.panel-default
			.panel-heading: h2.panel-title Step 1
			.panel-body
				.form-group
					label Choose a Facotry
						select.form-control.js-factory-select
							option(value='false') Select a Factory!
							for factory in factories ? factories : []
								option(value= factory.Id)= factory.name
			.panel-footer
				.text-right
					| Need a new #[strong Factory]? #[a(href='/make-robot-factory').btn.btn-primary Make One!]

		.panel.panel-default(duck-table='Robots', duck-function='add', duck-key='Id')
			.hidden(duck-field='_Id', duck-type='string')
				input(type='string', value= uuid(), duck-value)
			.panel-heading: h2.panel-title Step 2
			.panel-body
				p: strong What does this Robot Know?

				.js-robot.form-horizontal
					p Once you select a <strong>Factory</strong>, then we can start making your <strong>Robot</strong>

			.panel-footer
				.text-right
					button.btn.btn-success(duck-button='submit') Make this #[strong Robot]!


	script.
		void function initRobot($, duck){
			const factories = !{JSON.stringify(factories)};
			const $factorySelect = $('.js-factory-select');
			const $body = $('.js-body-code');
			const $robotForm = $('[duck-table]');
			const $robot = $('.js-robot');

			function makeFormObject(type, name, isForArray) {
				switch (type) {
					case "Robot": {
						if (isForArray) {
							return `
								Coming soon!
							`
						}

						return `
							Coming soon!
						`
					}
					case "Bool": {
						if (isForArray) {
							return `
								Coming soon!
							`
						}

						return `
							<div class='form-group' duck-field='${name}' duck-type='bool'>
								<div class='checkbox'>
									<label>
										<input type='checkbox' />
										${name}
									</label>
								</div>
							</div>
						`
					}
					case "Image": {
						if (isForArray) {
							return `
								Coming soon!
							`
						}

						return `
							<div class='form-group' duck-type='string' duck-field='${name}'>
								<label class='col-sm-2 control-label'>${name}</label>
								<div class='col-sm-10'>
									<input class='form-control' type='text' placeholder='${name}' duck-value='duck-value' />
								</div>
							</div>
						`
					}
					case "Number": {
						if (isForArray) {
							return `
								<div class='col-sm-10'>
									<div>
										<p style='display: flex; align-items: center;' duck-type='string'>
											<i class='fa fa-arrows-v' aria-hidden='true' style='margin-left: 15px;'></i>
											<input class='form-control' type='number' placeholder='${name}' duck-value='duck-value' style='margin:0 15px;' />
											<button class='btn btn-danger' duck-button='delete'></button>
										</p>
									</div>
									<p class='text-right'>
										<button class='btn btn-primary' duck-button='add'>Add ${name}</button>
									</p>
								</div>
							`
						}

						return `
							<div class='form-group' duck-type='number' duck-field='${name}'>
								<label class='col-sm-2 control-label'>${name}</label>
								<div class='col-sm-10'>
									<input class='form-control' type='number' placeholder='${name}' duck-value='duck-value' />
								</div>
							</div>
						`
					}
					case "User": {
						if (isForArray) {
							return `
								<div class='col-sm-10'>
									<div>
										<p style='display: flex; align-items: center;' duck-type='string'>
											<i class='fa fa-arrows-v' aria-hidden='true' style='margin-left: 15px;'></i>
											<input class='form-control' type='text' placeholder='${name}' duck-value='duck-value' style='margin:0 15px;' />
											<button class='btn btn-danger' duck-button='delete'></button>
										</p>
									</div>
									<p class='text-right'>
										<button class='btn btn-primary' duck-button='add'>Add ${name}</button>
									</p>
								</div>
							`
						}

						return `
							<div class='form-group' duck-type='string' duck-field='${name}'>
								<label class='col-sm-2 control-label'>${name}</label>
								<div class='col-sm-10'>
									<input class='form-control' type='date' placeholder='${name}' duck-value='duck-value' />
								</div>
							</div>
						`
					}
					case "Date": {
						if (isForArray) {
							return `
								<div class='col-sm-10'>
									<div>
										<p style='display: flex; align-items: center;' duck-type='string'>
											<i class='fa fa-arrows-v' aria-hidden='true' style='margin-left: 15px;'></i>
											<input class='form-control' type='date' placeholder='${name}' duck-value='duck-value' style='margin:0 15px;' />
											<button class='btn btn-danger' duck-button='delete'></button>
										</p>
									</div>
									<p class='text-right'>
										<button class='btn btn-primary' duck-button='add'>Add ${name}</button>
									</p>
								</div>
							`
						}

						return `
							<div class='form-group' duck-type='string' duck-field='${name}'>
								<label class='col-sm-2 control-label'>${name}</label>
								<div class='col-sm-10'>
									<input class='form-control' type='date' placeholder='${name}' duck-value='duck-value' />
								</div>
							</div>
						`
					}
					case "Wysiwyg": {
						if (isForArray) {
							return `
								Coming soon!
							`
						}

						return `
							<div class='form-group' duck-type='wysiwyg' duck-field='${name}'>
								<label class='col-sm-2 control-label'>${name}</label>
								<div class='col-sm-10'>
									<div class='summernote'></div>
								</div>
							</div>
						`
					}
					case "String":
					default: {
						if (isForArray) {
							return `
								<div class='col-sm-10'>
									<div>
										<p style='display: flex; align-items: center;' duck-type='string'>
											<i class='fa fa-arrows-v' aria-hidden='true' style='margin-left: 15px;'></i>
											<input class='form-control' type='text' placeholder='${name}' duck-value='duck-value' style='margin:0 15px;' />
											<button class='btn btn-danger' duck-button='delete'></button>
										</p>
									</div>
									<p class='text-right'>
										<button class='btn btn-primary' duck-button='add'>Add ${name}</button>
									</p>
								</div>
							`
						}

						return `
							<div class='form-group' duck-type='string' duck-field='${name}'>
								<label class='col-sm-2 control-label'>${name}</label>
								<div class='col-sm-10'>
									<input class='form-control' type='text' placeholder='${name}' duck-value='duck-value' />
								</div>
							</div>
						`
					}
				}
			}

			function newAttribute(attribute) {
				const name = attribute.name;
				const type = attribute.type;
				const id = attribute.id;

				if (type instanceof Array) {
					const $array = $('<div>', {
						'class': 'form-group',
						'style': 'width: 100%;',
						'duck-field': name,
						'duck-type': 'array',
					});	

					const listType = type[0]

					$array.append(`<label class='col-sm-2 control-label'>${name}</label>`)
					$array.append(makeFormObject(listType, name, true));

					return $array;
				} else {
					return makeFormObject(type, name);
				}
			}
			$factorySelect.on('input', (e) => {
				e.stopPropagation();
				e.preventDefault();

				const facotryId = $factorySelect.val()
				const factory = factories.filter((_factory) => _factory.Id === facotryId)[0];

				if (!factory) {
					$robot.html('<p>Once you select a <strong>Factory</strong>, then we can start making your <strong>Robot</strong></p>');
					return;
				}
				$robot.html('');

				factory.schema.forEach((attribute) => {
					$robot.append(newAttribute(attribute));
				});

				$robotForm.find('.summernote').summernote({height: '150px'});

				$robotForm.attr('duck-key-value', facotryId);
				$robotForm.duckForm({failureCallBack: (err) => {
					console.log(err)
				}});

			});

		}(jQuery.noConflict(), duck);
